<!DOCTYPE html>
<html lang="id">
  <head>
  <?= render('head') ?>
  </head>
  <body>
    <form method="POST" class="mdl-layout mdl-js-layout mdl-layout--fixed-header mdlx-layout__no-drawer">
      <header class="mdl-layout__header">
        <div class="mdl-layout__header-row">
          <a href="./editor?id=<?= $item->parentId ?>" class="mdl-button mdl-button--icon mdl-js-button mdl-js-ripple-effect">
            <i class="material-icons">arrow_back</i>
          </a>
          <span class="mdl-layout-title">#<?= format_sales_order_code($item->parentId) ?></span>
          <div class="mdl-layout-spacer"></div>
          <button class="mdl-button mdl-button--icon mdl-js-button mdl-js-ripple-effect" id="save-button"
            type="submit" name="action" value="save"><i class="material-icons left">check</i></button>
          <?php if ($item->id): ?>
            <button class="mdl-button mdl-button--icon mdl-js-button mdl-js-ripple-effect" id="delete-button" type="submit" name="action" value="delete">
              <i class="material-icons left">delete</i>
            </button>
          <?php endif ?>
        </div>
      </header>
      <main class="mdl-layout__content">
        <div class="mdl-grid">
          <?php if ($item->id): ?>
            <input type="hidden" name="id" value="<?= $item->id ?>">
          <?php endif ?>
          <input type="hidden" name="parentId" value="<?= $item->parentId ?>">
          <input type="hidden" id="productId" name="productId" value="<?= $item->productId ?>">
          <datalist id="product-list">
            <?php foreach ($products as $product): ?>
            <option value="<?= e($product->name) ?>" label="<?= $product->code ?>">
            <?php endforeach; ?>
          </datalist>
          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label mdl-cell mdl-cell--4-col <?= !empty($errors['productId']) ? 'is-invalid' : '' ?>">
            <input class="mdl-textfield__input" type="text" value="<?= e($item->productName) ?>" id="productName" name="productName" list="product-list">
            <label class="mdl-textfield__label" for="productName">Produk</label>
            <?php if (!empty($errors['productId'])): ?>
              <span class="form-error"><?= $errors['productId'] ?></span>
            <?php endif ?>
          </div>
          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label mdl-cell mdl-cell--2-col <?= !empty($errors['quantity']) ? 'is-invalid' : '' ?>">
            <input class="mdl-textfield__input numberEditor" type="text" value="<?= format_number($item->quantity) ?>" id="quantity" name="quantity">
            <label class="mdl-textfield__label" for="quantity">Kwantitas</label>
            <?php if (!empty($errors['quantity'])): ?>
              <span class="form-error"><?= $errors['quantity'] ?></span>
            <?php endif ?>
          </div>
        </div>
        <div class="mdl-grid">
          <div id="multiPaymentAccountSelect" class="mdl-selectfield mdl-js-selectfield mdl-selectfield--floating-label mdl-cell mdl-cell--4-col">
            <select id="multiPaymentAccountId" class="mdl-selectfield__select" name="multiPaymentAccountId">
              <?php foreach ($multiPaymentAccounts as $account): ?>
                <option value="<?= $account->id ?>" <?= $item->multiPaymentAccountId == $account->id ? 'selected' : '' ?>><?= e($account->name) ?></option>
              <?php endforeach ?>
            </select>
            <label class="mdl-selectfield__label" for="multiPaymentAccountId">Akun Multi Payment</label>
          </div>
          <div id="cost-editor" class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label mdl-cell mdl-cell--2-col"
               style="display:none">
            <input class="mdl-textfield__input numberEditor" type="text" value="<?= format_number($item->cost) ?>" id="cost" name="cost">
            <label class="mdl-textfield__label" for="cost">Modal</label>
          </div>
        </div>
        <div class="mdl-grid">
          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label mdl-cell mdl-cell--2-col <?=
              !empty($errors['price']) ? 'is-invalid' : '' ?>">
            <input class="mdl-textfield__input numberEditor" type="text" value="<?= format_number($item->price) ?>" id="price" name="price">
            <label class="mdl-textfield__label" for="price">Harga</label>
            <span id="price-hint" class="form-error"></span>
          </div>
          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label mdl-cell mdl-cell--4-col">
            <input class="mdl-textfield__input" type="text" value="<?= format_number($item->subtotalPrice) ?>" id="subtotal" readonly>
            <label class="mdl-textfield__label" for="subtotal">Subtotal</label>
          </div>
        </div>
      </main>
    </form>
    <?= render('foot') ?>
    <script>
      var products = <?= json_encode($products) ?>;
      var multipaymentProducts = <?= json_encode($multiPaymentProducts) ?>;
      var productsByIds = new Map()
        , productsByNames = new Map()
        , productsByCodes = new Map()
        , selectedProduct;
      var multipaymentProductsByAccountIds = new Map();
      
      var i;
      for (i = 0; i < products.length; i++) {
        var product = products[i];
        productsByIds.set(product.id, product);
        productsByNames.set(product.name.toLowerCase(), product);
        productsByCodes.set(product.code.toLowerCase(), product);
      }
      
      for (i = 0; i < multipaymentProducts.length; i++) {
        var product = multipaymentProducts[i];
        product.accountId = parseInt(product.accountId);
        product.productId = parseInt(product.productId);
        product.cost = parseInt(product.cost);
        product.price = parseInt(product.price);
        
        if (!multipaymentProductsByAccountIds.get(product.accountId))
          multipaymentProductsByAccountIds.set(product.accountId, new Map());
        
        multipaymentProductsByAccountIds.get(product.accountId)
          .set(product.productId, { cost: product.cost, price:product.price });
      }

      var productNameTextBox = document.querySelector('#productName');
      var quantityTextBox = document.querySelector('#quantity');
      var priceTextBox = document.querySelector('#price');
      var subtotalTextBox = document.querySelector('#subtotal');
      var productIdInput = document.querySelector('#productId');
      var priceHintElement = document.querySelector('#price-hint');
      var costEditor = document.querySelector('#cost-editor');
      var costTextBox = document.querySelector('#cost');
      var multiPaymentAccountSelect = document.querySelector('#multiPaymentAccountSelect');
      var multiPaymentAccountSelect2 = document.querySelector('#multiPaymentAccountId');
      
      function updatePrice() {
        priceHintElement.innerHTML = "Harga tidak ditemukan.";
        
        if (selectedProduct.type === '101') {
          priceHintElement.innerHTML = "";
          updateSubtotal();
          return;
        }
        
        var quantity = parseInt(quantityTextBox.value.replace(/\./g, '').replace(/,/g, '.'));
        if (selectedProduct && quantity > 0) {
          var priceValue = parseInt(priceTextBox.value);
          var i, price, priceFound;
          for (i = 0; i < selectedProduct.prices.length; i++) {
            price = selectedProduct.prices[i];
            
            // cek kwantitas ada di range
            if ((price.quantityMin !== null && price.quantityMax === null && quantity >= price.quantityMin)
                || (quantity >= price.quantityMin && quantity <= price.quantityMax)) {
              priceFound = price;
              break;
            }
          }

          if (priceFound) {
            priceHintElement.innerHTML = "";
            
            var min = 0, max = 0, tmpMin, tmpMax;
            for (i = 1; i <= 3; i++) {
              tmpMin = priceFound['price' + i + 'Min'];
              tmpMax = priceFound['price' + i + 'Max'];
                
              if (tmpMin !== null && min === 0) min = tmpMin;
              if (tmpMin !== null && min > tmpMin) min = tmpMin;
              if (tmpMax > max) max = tmpMax;
            }
            
            priceValue = max;
          }
          
          if (min && max && min !== max) {
            priceHintElement.innerHTML = min.toLocale() + ' - ' + max.toLocale();
          }
          
          priceTextBox.value = priceValue.toLocale();
        }
        else {
          priceTextBox.value = 0;
        }
        
        updateSubtotal();
      }

      function updateSubtotal() {
        var quantity = parseInt(quantityTextBox.value.replace(/\./g, '').replace(/,/g, '.'));
        var price = parseInt(priceTextBox.value.replace(/\./g, '').replace(/,/g, '.'));
        subtotalTextBox.value = (quantity * price).toLocale();
      }
      
      function onProductChanged() {
        costEditor.style.display = 'none';
        multiPaymentAccountSelect.style.display = 'none';
        productIdInput.value = "0";
        
        var text = productNameTextBox.value.trim().toLowerCase();
        selectedProduct = productsByNames.get(text);
        
        if (!selectedProduct) 
          selectedProduct = productsByCodes.get(text)
        
        if (selectedProduct) {
          productIdInput.value = selectedProduct.id;
          if (selectedProduct.type === '101' || selectedProduct.type === '1') {
            //costEditor.style.display = 'inherit';
            multiPaymentAccountSelect.style.display = 'inherit';
            
            var selectedAccountId = parseInt(multiPaymentAccountSelect2.value);
            var mpp = multipaymentProductsByAccountIds.get(selectedAccountId);
            
            if (mpp) {
              var mp = mpp.get(parseInt(selectedProduct.id));
              if (mp) {
                priceTextBox.value = mp.price.toLocale();
                costTextBox.value = mp.cost.toLocale();
                updateSubtotal();
              }
            }
          }
        }
      }
      
      productNameTextBox.addEventListener('change', onProductChanged);
      productNameTextBox.addEventListener('change', updatePrice);
      quantityTextBox.addEventListener('change', updatePrice);
      priceTextBox.addEventListener('change', updateSubtotal);
      multiPaymentAccountSelect.addEventListener('change', onProductChanged);
      
      // handle delete
      var deleteButton = document.querySelector('#delete-button');
      if (deleteButton) {
        deleteButton.addEventListener('click', function(e) {
          if (!confirm('Hapus Produk?')) {
            e.preventDefault();
            return;
          }
        });
      }
      
      onProductChanged();
    </script>
  </body>
</html>